name: CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10']

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pip-audit coverage
        pip install -e .

    - name: Run Unit Tests with Coverage
      env:
        PYTHONPATH: ${{ github.workspace }}
      run: |
        coverage run -m pytest tests/unit

    - name: Generate Coverage Report
      run: |
        coverage report

    - name: Start Streamlit server
      env:
        PYTHONPATH: ${{ github.workspace }}
      run: |
        nohup streamlit run src/app.py &
        timeout 30 bash -c 'until curl --output /dev/null --silent --head --fail http://localhost:8501; do sleep 1; done'

    - name: Run E2E tests
      env:
        PYTHONPATH: ${{ github.workspace }}
      run: |
        pytest tests/e2e/ --capture=no

    - name: Run smoke tests
      env:
        PYTHONPATH: ${{ github.workspace }}
      run: |
        python scripts/smoke_insights.py

    - name: Run pip-audit
      run: |
        pip-audit --output=report.json --fail-on=vuln

    - name: Upload test artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          report.json
          coverage.xml
        retention-days: 14

    - name: Build Docker image
      run: |
        docker build . -t watchdog:ci

  lint:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8

    - name: Lint with flake8
      run: |
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics
