"""
Integration tests for async processing using Celery.
"""

import pytest
import pandas as pd
import json
import os
import time
from unittest.mock import patch, MagicMock

from src.insights.insight_generator import InsightGenerator
from src.insights.engine import InsightEngine
from src.celery_app import app as celery_app

# Sample data for testing
SAMPLE_DATA = pd.DataFrame({
    'SaleDate': ['2023-01-01', '2023-01-02', '2023-01-03'],
    'SalePrice': [25000, 30000, 28000],
    'LeadSource': ['Website', 'CarGurus', 'Walk-in'],
    'VIN': ['VIN001', 'VIN002', 'VIN003'],
    'TotalGross': [2500, 3000, 2800]
})

@pytest.fixture
def mock_celery_task():
    """Mock Celery task for testing."""
    # Create a mock task result
    mock_task = MagicMock()
    mock_task.id = "mock-task-id"
    mock_task.status = "PENDING"
    
    # Mock the delay method to return the mock task
    with patch('src.insights.tasks.generate_insight.delay', return_value=mock_task):
        yield mock_task

@pytest.fixture
def mock_celery_result():
    """Mock Celery result for testing."""
    # Create mock result
    mock_result = {
        "summary": "Test insight generated by mock",
        "is_error": False,
        "is_direct_calculation": True,
        "timestamp": "2023-04-18T12:00:00Z"
    }
    
    # Create a mock AsyncResult
    mock_async_result = MagicMock()
    mock_async_result.id = "mock-task-id"
    mock_async_result.status = "SUCCESS"
    mock_async_result.result = mock_result
    mock_async_result.ready.return_value = True
    mock_async_result.get.return_value = mock_result
    
    # Mock the AsyncResult for task retrieval
    with patch('celery.result.AsyncResult', return_value=mock_async_result):
        yield mock_async_result

def test_insight_generator_async_mode(mock_celery_task):
    """Test that insight generator dispatches async tasks correctly."""
    # Create insight generator with async mode
    generator = InsightGenerator(use_redis_cache=False)
    
    # Generate insight with async mode
    result = generator.generate_insight(
        prompt="Show me the highest sale price",
        df=SAMPLE_DATA,
        async_mode=True
    )
    
    # Verify task was dispatched
    assert "task_id" in result
    assert result["status"] == "PENDING"
    assert result["is_async"] is True
    assert "timestamp" in result
    
    # Verify mock_celery_task.delay was called
    assert mock_celery_task.id == result["task_id"]

def test_insight_engine_async_mode(monkeypatch):
    """Test that insight engine runs async via Celery."""
    # Mock the run_insight_pipeline task
    mock_task = MagicMock()
    mock_task.id = "mock-engine-task-id"
    
    # Mock the delay method
    monkeypatch.setattr("src.insights.tasks.run_insight_pipeline.delay", 
                      lambda *args, **kwargs: mock_task)
    
    # Create a mock file
    class MockFile:
        def __init__(self):
            self.name = "test.csv"
            
        def read(self):
            return SAMPLE_DATA.to_csv().encode()
    
    # Create insight engine
    mock_llm = MagicMock()
    engine = InsightEngine(llm_client=mock_llm)
    
    # Run async pipeline
    result = engine.run(MockFile())
    
    # Verify task dispatch
    assert "task_id" in result
    assert result["status"] == "PENDING"
    assert "message" in result
    assert "metadata" in result
    assert result["metadata"]["task_name"] == "run_insight_pipeline"

def test_async_result_retrieval(mock_celery_result):
    """Test retrieving async results from Celery."""
    # Get task result
    task_id = "mock-task-id"
    result = celery_app.AsyncResult(task_id)
    
    # Verify result retrieval
    assert result.ready() is True
    assert result.status == "SUCCESS"
    
    # Get actual result
    insight_result = result.get()
    
    # Verify result content
    assert insight_result["summary"] == "Test insight generated by mock"
    assert insight_result["is_error"] is False
    assert insight_result["is_direct_calculation"] is True
    assert "timestamp" in insight_result

@pytest.mark.skipif(not os.environ.get('RUN_INTEGRATION_TESTS'), 
                   reason="Requires real Celery/Redis setup")
def test_full_async_pipeline_integration():
    """
    Full integration test with real Celery workers.
    
    This test will be skipped unless RUN_INTEGRATION_TESTS is set in the environment.
    It requires Celery workers to be running and Redis to be available.
    """
    # Create insight generator
    generator = InsightGenerator()
    
    # Submit async job
    result = generator.generate_insight(
        prompt="What's the highest sale price?",
        df=SAMPLE_DATA,
        async_mode=True
    )
    
    # Get task ID
    task_id = result["task_id"]
    assert task_id is not None
    
    # Wait for result (with timeout)
    task_result = None
    start_time = time.time()
    timeout = 10  # seconds
    
    # Poll for result
    while time.time() - start_time < timeout:
        async_result = celery_app.AsyncResult(task_id)
        if async_result.ready():
            task_result = async_result.get()
            break
        time.sleep(0.5)
    
    # Verify we got a result before timeout
    assert task_result is not None, "Task did not complete within timeout"
    
    # Verify result structure
    assert "summary" in task_result
    assert "is_error" in task_result
    assert task_result["is_error"] is False