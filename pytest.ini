[pytest]
testpaths = tests
norecursedirs = venv .git .tox .cache __pycache__ docs scripts
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Display and execution settings
addopts = 
    -v 
    --color=yes 
    --no-header 
    --showlocals 
    --maxfail=1 
    --timeout=300
    --strict-markers
    --cov=src
    --cov=src.critical_modules --cov-fail-under=src.critical_modules:90
    --cov=src.validators --cov-fail-under=src.validators:85
    --cov=src.security --cov-fail-under=src.security:95
    --cov-report=term-missing
    --cov-report=html:reports/coverage
    --cov-report=xml:reports/coverage.xml
    --cov-fail-under=80
    --junitxml=reports/junit.xml
    -p no:warnings

# Reporting settings
junit_family = xunit2
junit_suite_name = Watchdog AI Test Suite
junit_logging = all
junit_duration_report = call

# Enhanced logging
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)
log_cli_date_format = %Y-%m-%d %H:%M:%S
log_file = reports/pytest-log.txt
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)
log_file_date_format = %Y-%m-%d %H:%M:%S

# Test markers
markers =
    unit: Unit tests
    integration: Integration tests
    e2e: End-to-end tests
    slow: Tests that take longer to run
    performance: Performance and load tests
    dashboard: Dashboard functionality tests
    error_handling: Error handling tests
    flaky: Test that may fail occasionally
    critical: Critical path tests that must never fail
    data_validation: Tests that validate data integrity and quality
    security: Tests for security aspects of the codebase
    api: Tests that verify API endpoints and behavior

# Async settings
asyncio_mode = auto
asyncio_default_fixture_loop_scope = function

# Other settings
python_package = src
cache_dir = .pytest_cache
xfail_strict = true
showlocals = true

# Warning filters
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning
    default::ResourceWarning

# Coverage settings
[coverage:run]
branch = True
source = src
parallel = true
concurrency = multiprocessing, thread
data_file = .coverage

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise NotImplementedError
    if __name__ == .__main__.:
    pass
    raise ImportError
    DEBUG
    TYPE_CHECKING
precision = 2
skip_empty = true

[coverage:paths]
source =
    src/
    */site-packages/

[coverage:html]
directory = reports/coverage
title = Watchdog AI Coverage Report

