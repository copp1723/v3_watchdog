Metadata-Version: 2.4
Name: watchdog_ai
Version: 0.1.0
Summary: AI-powered dealership analytics
Home-page: https://github.com/watchdogai/v3watchdog_ai
Author: Watchdog AI Team
Author-email: Josh Copp <noreply@codebuff.com>
Project-URL: Homepage, https://github.com/copp1723/v3watchdog_ai
Classifier: Programming Language :: Python :: 3
Classifier: Operating System :: OS Independent
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: streamlit>=1.31.0
Requires-Dist: pandas>=2.2.0
Requires-Dist: numpy>=1.26.0
Requires-Dist: python-dotenv>=1.0.0
Requires-Dist: plotly>=5.18.0
Requires-Dist: python-dateutil>=2.8.2
Requires-Dist: altair>=5.2.0
Requires-Dist: openai>=1.12.0
Requires-Dist: pydantic>=2.5.0
Requires-Dist: requests>=2.31.0
Requires-Dist: pyyaml>=6.0
Requires-Dist: rapidfuzz>=3.6.0
Provides-Extra: dev
Requires-Dist: black>=23.12.1; extra == "dev"
Requires-Dist: isort>=5.13.2; extra == "dev"
Requires-Dist: mypy>=1.8.0; extra == "dev"
Requires-Dist: flake8>=7.0.0; extra == "dev"
Requires-Dist: pre-commit>=3.6.0; extra == "dev"
Provides-Extra: test
Requires-Dist: pytest>=8.0.0; extra == "test"
Requires-Dist: pytest-mock>=3.12.0; extra == "test"
Requires-Dist: pytest-asyncio>=0.23.0; extra == "test"
Requires-Dist: pytest-playwright>=0.4.0; extra == "test"
Requires-Dist: pytest-cov>=4.1.0; extra == "test"
Requires-Dist: markdown>=3.5.0; extra == "test"
Provides-Extra: docs
Requires-Dist: mkdocs>=1.5.3; extra == "docs"
Requires-Dist: mkdocs-material>=9.5.8; extra == "docs"
Provides-Extra: aws
Requires-Dist: boto3>=1.34.0; extra == "aws"
Requires-Dist: botocore>=1.34.0; extra == "aws"
Provides-Extra: vault
Requires-Dist: hvac>=1.2.0; extra == "vault"
Provides-Extra: nova-act
Requires-Dist: schedule>=1.2.0; extra == "nova-act"
Requires-Dist: playwright>=1.41.0; extra == "nova-act"
Requires-Dist: aiohttp>=3.9.0; extra == "nova-act"
Requires-Dist: cryptography>=42.0.0; extra == "nova-act"
Requires-Dist: asyncio>=3.4.3; extra == "nova-act"
Requires-Dist: nest_asyncio>=1.6.0; extra == "nova-act"
Provides-Extra: monitoring
Requires-Dist: sentry-sdk>=1.26.0; extra == "monitoring"
Requires-Dist: statsmodels>=0.13.0; extra == "monitoring"
Requires-Dist: matplotlib>=3.8.0; extra == "monitoring"
Provides-Extra: all
Requires-Dist: boto3>=1.34.0; extra == "all"
Requires-Dist: botocore>=1.34.0; extra == "all"
Requires-Dist: hvac>=1.2.0; extra == "all"
Requires-Dist: schedule>=1.2.0; extra == "all"
Requires-Dist: playwright>=1.41.0; extra == "all"
Requires-Dist: aiohttp>=3.9.0; extra == "all"
Requires-Dist: cryptography>=42.0.0; extra == "all"
Requires-Dist: asyncio>=3.4.3; extra == "all"
Requires-Dist: nest_asyncio>=1.6.0; extra == "all"
Requires-Dist: sentry-sdk>=1.26.0; extra == "all"
Requires-Dist: statsmodels>=0.13.0; extra == "all"
Requires-Dist: matplotlib>=3.8.0; extra == "all"
Requires-Dist: slack-sdk>=3.27.0; extra == "all"
Requires-Dist: python-Levenshtein>=0.23.0; extra == "all"
Dynamic: author
Dynamic: home-page
Dynamic: requires-python

# Watchdog AI

![Watchdog AI](assets/watchdog_logo.png)

## Overview

Watchdog AI is an advanced analytics platform that helps automotive dealerships analyze sales data, identify trends, and generate actionable insights. The platform leverages AI/ML technologies to provide customized recommendations and visualizations that drive business performance.

## Features

- **Data Integration**: Connect with popular Dealer Management Systems (DMS) and CRM platforms
- **Automated Analysis**: Process sales data and generate insights automatically 
- **Interactive Dashboards**: Visualize key performance indicators and metrics
- **Natural Language Queries**: Ask questions about your data in plain English
- **Predictive Analytics**: Forecast sales trends and identify opportunities
- **Validation Engine**: Ensure data quality and accuracy with automated validation

## Repository Structure

```
watchdog_ai/
├── assets/                 # Static assets and resources
├── config/                 # Configuration files and settings
│   ├── docker/             # Docker configuration
│   ├── env/                # Environment configurations
│   └── scripts/            # Utility scripts
├── data/                   # Sample and test data
├── docs/                   # Documentation files
├── src/                    # Source code
│   ├── validators/         # Data validation components
│   ├── insights/           # Insight generation engine
│   ├── analytics/          # Data analytics modules
│   ├── ui/                 # User interface components
│   └── utils/              # Utility functions
├── tests/                  # Test suite
│   ├── unit/               # Unit tests
│   ├── integration/        # Integration tests
│   ├── e2e/                # End-to-end tests
│   ├── conftest.py         # Pytest configuration and fixtures
│   └── test_base.py        # Base testing utilities
└── ui/                     # Front-end application
```

## Installation

### Prerequisites

- Python 3.10+
- Docker and Docker Compose (optional, for containerized deployment)
- Virtual environment manager (venv or conda)

### Local Development Setup

1. Clone the repository:
   ```bash
   git clone https://github.com/yourusername/watchdog_ai.git
   cd watchdog_ai
   ```

2. Create and activate a virtual environment:
   ```bash
   python -m venv venv
   source venv/bin/activate  # On Windows: venv\Scripts\activate
   ```

3. Install dependencies:
   ```bash
   pip install -r requirements.txt
   ```

4. Set up environment variables:
   ```bash
   cp .env.example .env
   # Edit .env with your configuration
   ```

5. Run the application:
   ```bash
   ./run.sh
   ```

### Docker Setup

1. Build and start the Docker containers:
   ```bash
   docker-compose up -d
   ```

2. The application will be available at `http://localhost:8501`

## Configuration

Configuration is managed through environment variables that can be set in the `.env` file or through your system's environment variables.

Key configuration options:

- `WATCHDOG_ENV`: Set to 'development', 'testing', or 'production'
- `OPENAI_API_KEY`: Your OpenAI API key for LLM functionality
- `DATABASE_URL`: Database connection string
- `LOG_LEVEL`: Logging level (DEBUG, INFO, WARNING, ERROR)
- `ENABLE_MEMORY`: Enable or disable conversation memory (true/false)

## Usage

### Basic Usage

1. Start the application using `./run.sh` or Docker
2. Upload your sales data through the web interface
3. Navigate to the dashboard to view insights
4. Use the natural language query interface to ask specific questions

### Example Queries

- "Show me sales by lead source for the last quarter"
- "What was our best-performing vehicle model last month?"
- "Compare gross profit by salesperson year over year"
- "Which lead sources have the highest conversion rate?"

## Testing

Watchdog AI uses pytest for testing. We've implemented a comprehensive testing infrastructure including fixtures, utilities, and configuration for efficient test development.

### Test Structure

- **Unit Tests**: Test individual components in isolation
- **Integration Tests**: Test interactions between components
- **End-to-End Tests**: Test complete user workflows

### Running Tests

Run all tests:
```bash
pytest
```

Run specific test categories:
```bash
pytest -m unit  # Run only unit tests
pytest -m integration  # Run only integration tests
pytest -m "not slow"  # Skip slow tests
```

Run with coverage:
```bash
pytest --cov=src
```

### Testing Utilities

We've implemented robust testing utilities in `tests/test_base.py` including:

- DataFrame comparison methods with configurable tolerance
- Test data generation utilities for realistic testing data
- Common assertion helpers for simplifying test validation
- Mocking utilities for external services and dependencies
- Performance testing helpers to benchmark critical functions
- File handling utilities for test data management

### Test Fixtures

Global test fixtures are defined in `tests/conftest.py`, providing:

- Database connection mocking
- Enhanced error tracking with detailed logging
- Performance monitoring
- Common test data generators
- Validation utilities
- External service mocks (OpenAI, Redis, MongoDB)

## Contributing

We welcome contributions to Watchdog AI! Please follow these steps:

1. Fork the repository
2. Create a feature branch (`git checkout -b feature/amazing-feature`)
3. Make your changes
4. Run tests to ensure they pass
5. Commit your changes (`git commit -m 'Add amazing feature'`)
6. Push to the branch (`git push origin feature/amazing-feature`)
7. Open a Pull Request

Please ensure your code adheres to our coding standards:
- Run `ruff check` and `mypy` before submitting
- Include tests for new functionality
- Update documentation as needed

## License

This project is licensed under the MIT License - see the LICENSE file for details.

## Support

For support, contact support@watchdogai.com or open an issue on this repository.

